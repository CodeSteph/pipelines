#!/usr/bin/env python
from __future__ import print_function
import argparse
import importlib
import os
import subprocess
import sys

import impl_amrfinder

# N.B. This code represents the minimum functionallity required to
#      download and update the latest version of the code. As such
#      resist updating this code as much as possible. All changes
#      should be made in impl_armfinder.py

def main():
    parse = argparse.ArgumentParser(add_help=False)
    #parse.add_argument('-x', '--check-update', help='Check for any updates to this pipeline (default: %(default)s)', action='store_true')
    parse.add_argument('-v', '--version', action='store_true', help='Print current version information, and checks for latest version.')
    parse.add_argument('-u', '--update', action='store_true', help='Update this code and supplemental data, then quit. (default: %(default)s)')
    parse.add_argument('-U', '--update-data', action='store_true', help='Update auxillary data from the ftp site, then quit. (default: %(default)s)')

    args, remaining_argv = parse.parse_known_args()

    script_path = os.path.dirname(os.path.realpath(__file__))
    if args.version:
        impl_amrfinder.print_versions(script_path)
        sys.exit(0)
    elif args.update:
        print("Checking for update...", file=sys.stderr, end='')
        try:
            out = open(os.devnull, "wb")
            svn = subprocess.check_call(["svn", "update", script_path], stdout=out, stderr=out)
            print("success!", file=sys.stderr)
        except subprocess.CalledProcessError:
            print("failure.", file=sys.stderr)
        print("Updating supplementary data")
        impl_amrfinder.update_data()
        #importlib.reload(impl_amrfinder)
    elif args.update_data:
        print("Updating supplementary data")
        impl_amrfinder.update_data()
    else:
        impl_amrfinder.run(parse)

    sys.exit(0) #success

if __name__ == "__main__":
    main()
